{"version":3,"sources":["components/Formatter/Formatter.tsx","components/ElementSelector/ElementSelector.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["KEYS","ElementSelector","onChange","useState","element","setElement","onChangeElement","newValue","gutter","isText","isPulsing","className","onClick","type","name","height","data","direction","value","ARRAY_KEYS","CLASS","ID","TEXT","TYPE","CHECKED","mapConditionToString","key","contains","Formatter","tmpCondition","setTmpCondition","conditions","setConditions","useEffect","length","reducedConditions","slice","reduce","carry","condition","columns","map","index","c","filter","v","i","e","onSubmit","undefined","Header","Body","selector","setSelector","event","App","rows","spacing","colSpan","row","column","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56a8c3cd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Checkbox, DropdownField, Form, Grid, Icon, Label, PaddedContainer, Skeleton, Tag, TextField } from 'precise-ui'\nimport { ElementSelector } from '../ElementSelector';\nimport './styles.scss';\n\n\nenum KEYS {\n  CLASS = '@class',\n  ID = '@id',\n  TEXT = 'text()',\n  TYPE = '@type',\n  CHECKED = '@checked',\n}\n\nconst ARRAY_KEYS = [\n  KEYS.CLASS,\n  KEYS.ID,\n  KEYS.TEXT,\n  KEYS.TYPE,\n  KEYS.CHECKED,\n]\n\ntype Condition = {key?: KEYS, value?: string, contains?: boolean}\n\nconst mapConditionToString = ({key, value, contains}: Condition) =>\n  key === KEYS.CHECKED\n    ? `${key}`\n    : (contains ? `contains(${key}, \"${value}\")` : `${key}=\"${value}\"`);\n\ntype FormatterProps = {\n  onChange: (selector: string) => void\n}\n\nexport const Formatter: React.FC<FormatterProps> = ({onChange}) => {\n  const [element, setElement] = useState<string>();\n  const [tmpCondition, setTmpCondition] = useState<Condition>();\n  const [conditions, setConditions] = useState<Condition[]>([]);\n\n  useEffect(() => {\n    if (element) {\n      if (conditions.length > 0) {\n        const reducedConditions = conditions.length === 1\n          ? mapConditionToString(conditions[0])\n          : mapConditionToString(conditions[0]) + conditions.slice(1).reduce(\n            (carry, condition) => carry + ' and ' + mapConditionToString(condition),\n            ''\n          );\n\n        onChange('//' + element + (reducedConditions && '[' + reducedConditions + ']'));\n      } else {\n        onChange('//' + element);\n      }\n    } else {\n      onChange('');\n    }\n  }, [element, conditions, onChange])\n\n  return (\n    <Grid columns={2}>\n      <ElementSelector onChange={(element) => setElement(element)} />\n        {element &&\n        <>\n            <PaddedContainer gutter=\"small\">\n              {tmpCondition ? <code>{mapConditionToString(tmpCondition)}</code> : <Skeleton isText isPulsing={false} />}\n            </PaddedContainer>\n\n            <PaddedContainer gutter=\"small\">\n              {conditions.length > 0 ? conditions.map((condition, index) =>\n                <Tag className=\"tag-boi\" onClick={() => setConditions(c => c.filter((v, i) => i !== index))} type=\"secondary\">\n                  {mapConditionToString(condition)} <Icon name=\"Cancel\" />\n                </Tag>\n              ) : <Skeleton isText isPulsing={false} height={'23px'} /> }\n            </PaddedContainer>\n\n            <Form\n              onChange={(e) => {\n                const {key, contains, value} = e.value;\n                if (key.length) {\n                  setTmpCondition({\n                    key: ARRAY_KEYS[key],\n                    contains,\n                    value\n                  })\n                }\n              }}\n              onSubmit={(e) => {\n                if (tmpCondition) {\n                  setConditions(conditions => [...conditions, tmpCondition]);\n                  setTmpCondition(undefined);\n                }\n              }}\n            >\n            <PaddedContainer gutter=\"small\">\n              <Label>Attribute</Label>\n            </PaddedContainer>\n            <PaddedContainer gutter=\"small\">\n              <DropdownField data={ARRAY_KEYS} name=\"key\"/>\n            </PaddedContainer>\n\n            <PaddedContainer gutter=\"small\">\n              <Label>Value</Label>\n            </PaddedContainer>\n\n            <PaddedContainer gutter=\"small\">\n              <TextField name=\"value\"/>\n            </PaddedContainer>\n\n            <PaddedContainer gutter=\"small\">\n              <Checkbox name=\"contains\">Contains</Checkbox>\n            </PaddedContainer>\n\n            <PaddedContainer gutter=\"small\">\n              <Button>Submit</Button>\n            </PaddedContainer>\n          </Form>\n        </>}\n    </Grid>\n  );\n}\n\n\n/**\n * //button[text()=\"Edit details\"]\n * //button[contains(text(), \"Create License\")]\n\n * //div[@class=\"addressBook-table\"]\n * //button[contains(@class, \"dropdown-toggle\")]\n\n * //div[@id=\"addressbook-contacts-table\"]\n * //div[@id=\"addressbook-contacts-table\"]//button[contains(@class, \"dropdown-toggle\")]\n * \n * //input[@id=\"address_book_contact_isPreferred\" and @checked]\n * //input[@type=\"checkbox\" and @class=\"license-checkbox\"]\n */\n","import { PaddedContainer, Tag, Label, DropdownField, InputChangeEvent, Skeleton, Icon } from \"precise-ui/dist/es6\"\nimport React, { useState } from \"react\";\nimport './styles.scss';\n\ntype ElementSelectorProps = {\n  onChange:(element?: string) => void\n};\n\nexport const ElementSelector: React.FC<ElementSelectorProps> = ({onChange}) => {\n  const [element, setElement] = useState<string|null>(null);\n\n  const onChangeElement = (newValue: string|null) => {\n    if (newValue) {\n      onChange(newValue);\n    } else {\n      onChange();\n    }\n\n    setElement(newValue);\n  }\n\n  return (\n    <>\n      <PaddedContainer gutter=\"small\">\n        {element\n          ? <code>element</code>\n          : <Skeleton isText isPulsing={false} />}\n      </PaddedContainer>\n\n      <PaddedContainer gutter=\"small\">\n        {element\n          ? <Tag className=\"tag-boi\" onClick={() => onChangeElement(null)} type=\"primary\">{element} <Icon name=\"Cancel\" /></Tag>\n          : <Skeleton isText isPulsing={false} height={'23px'} />\n        }\n      </PaddedContainer>\n\n      <PaddedContainer gutter='small'>\n        <Label>Element</Label>\n      </PaddedContainer>\n\n      <PaddedContainer gutter='small'>\n        <DropdownField data={['button', 'a']} direction={0} onChange={\n          ({value}: InputChangeEvent<string[]>) => onChangeElement(value[0])\n        }/>\n      </PaddedContainer>\n    </>\n  )\n}","import React, { useState } from 'react';\nimport { Grid, GridArea, Headline, PaddedContainer } from 'precise-ui'\nimport './App.scss';\nimport { Formatter } from '../Formatter';\n\nconst Header = () =>\n  <header className=\"App-header\">\n    <PaddedContainer gutter=\"large\">\n      <Headline>Xpath Generator</Headline>\n    </PaddedContainer>\n  </header>;\n\nconst Body = () => {\n  const [selector, setSelector] = useState<string>();\n  const onChange = (event: string) => {\n    setSelector(event);\n  }\n\n  return (\n    <body>\n      <PaddedContainer gutter=\"large\">\n        <Formatter onChange={onChange}/>\n      </PaddedContainer>\n\n      <PaddedContainer gutter=\"large\">\n        <PaddedContainer gutter=\"small\">\n          {selector}\n        </PaddedContainer>\n      </PaddedContainer>\n    </body>\n  );\n}\n\nexport const App: React.VFC = () => {\n  return (\n    <div className=\"App\">\n      <Grid rows={['48px', '3fr']} columns={5} spacing={'16px'} >\n        <GridArea colSpan={3} row={0} column={1}>\n          <Header/>\n        </GridArea>\n\n        <GridArea colSpan={3} row={1} column={1}>\n          <Body/>\n        </GridArea>\n      </Grid>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}